function [sums] = mcm_SiteSpec_Gapfill_v2(site, year_start, year_end, Ustar_th)
%% mcm_SiteSpec_Gapfill.m
%%% This function fills NEE data using the site-specific (PI-preferred) method,
%%% This approach uses...

%%% a logistic RE-Ts function, and a Michaelis-Menten
%%% GEP-PAR function.  Both models are adjusted for bias offset by use of
%%% a time-varying-parameter.
%%% Created in its current form by JJB, March 8, 2010.
%%% usage: mcm_FCRN_Gapfill(site, year_start, year_end, Ustar_th)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Revision History
%
%
%
%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
close all;

%% Make the model flexible to different amount of input information
%%% Set Ustar threshold (if empty)
if nargin == 3 || isempty(Ustar_th)
Ustar_th = input('Enter u* threshold: ');
end

%%% Set Ustar threshold and years (if empty)
if nargin == 1
Ustar_th = input('Enter u* threshold: ');    
year_start = input('Enter start year: ');
year_end = input('Enter end year: ');
end

%%% Set years (if empty)
if isempty(year_start)
    year_start = input('Enter start year: ');
end
if isempty(year_end)
    year_end = input('Enter end year: ');
end

%% Pre-defined variables, mostly for plotting:
test_Ts = (-10:2:26)';
test_PAR = (0:200:2400)';
clrs = [1 0 0; 0.5 0 0; 0 1 0; 0.8 0.5 0.7; 0 0 1; 0.2 0.1 0.1; ...
    1 1 0; 0.4 0.5 0.1; 1 0 1; 0.9 0.9 0.4; 0 1 1; 0.4 0.8 0.1];
test_VPD = (0:0.2:3)';
test_SM = (0.045:0.005:0.10)';

%% Paths:
ls = addpath_loadstart;
load_path = [ls 'Matlab/Data/Master_Files/' site '/'];
save_path = [ls 'Matlab/Data/Flux/CPEC/' site '/Final_Calculated/'];

%% Load gapfilling file and make appropriate adjustments:
load([load_path site '_gapfill_data_in.mat']);
%%% trim data to fit with the years selected:
data = trim_data_files(data,year_start, year_end);
%%% Calculate VPD from RH and Ta:
data.VPD = VPD_calc(data.RH, data.Ta);
[~, data.GDD] = GDD_calc(data.Ta,10,48,year_start:1:year_end);
%%% Make a single SM index from a and b pits - use Pit A first, since at 
%%% all sites it is the more dependable pit:
SM(1:length(data.SM_a),1) = NaN;
SM(isnan(SM),1) = data.SM_a(isnan(SM),1);
SM(isnan(SM),1) = data.SM_b(isnan(SM),1);
data.SM = SM; clear SM;
%%% Add a tag for the site name:
data.site = site;


%%% Estimate std associated with each measurement of NEE:
data.NEEstd = NEE_random_error_estimator_v2(data, [], Ustar_th);
close all;


%% Site- and Year-specific fixes to the data:

%%% For TP02 in 2008, incorporate the OPEC data:
switch site 
    case 'TP02'
        try
          ind = find(data.Year == 2008);
          if ~isempty(ind)
              data.NEE(data.Year == 2008 & isnan(data.NEE) & data.dt < 190) = data.NEE_OPEC(data.Year == 2008 & isnan(data.NEE) & data.dt < 190);
              data.Ustar(data.Year == 2008 & isnan(data.Ustar) & data.dt < 190) = data.Ustar_OPEC(data.Year == 2008 & isnan(data.Ustar) & data.dt < 190);
          end
        catch
        end
end

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%% Part 1: Respiration %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% resp_day_constraints = [0 367];
%%% Perhaps try to get a single SM function, then allow Ts to vary:
if strcmp(site,'TP39') == 1;
ind_param(1).RE_all = find((data.Ustar >= Ustar_th & ~isnan(data.Ts5) & ~isnan(data.SM) & ~isnan(data.NEE) & data.PAR < 15) |... % growing season
     (data.Ustar >= Ustar_th & ~isnan(data.NEE) & ~isnan(data.SM) & ((data.dt < 85 | data.dt > 335) & data.Ts5 < 0.2)  ) );                                   % non-growing season  
else
ind_param(1).RE_all = find((data.Ustar >= Ustar_th & ~isnan(data.Ts5) & ~isnan(data.SM) & ~isnan(data.NEE) & data.PAR < 15 & ((data.Year < 2008 & data.Ta > 5) | (data.Year > 2007 & data.Ta > -20)) ) |... % growing season
     (data.Ustar >= Ustar_th & ~isnan(data.NEE) & ~isnan(data.SM) & ((data.dt < 85 | data.dt > 335) & data.Ts5 < 0.2) & ((data.Year < 2008 & data.Ta > 5) | (data.Year > 2007 & data.Ta > -20)))   );                                   % non-growing season
end

% ind_param(1).RE_all = find((data.Ustar >= Ustar_th & ~isnan(data.Ts5) & ~isnan(data.SM) & ~isnan(data.NEE) & data.PAR < 15 & data.Ta > 5) |... % growing season
%      (data.Ustar >= Ustar_th & ~isnan(data.NEE) & ~isnan(data.SM) & ((data.dt < 85 | data.dt > 335) & data.Ts5 < 0.2 & data.Ta > 5)  ) );                                   % non-growing season
options.costfun ='WSS'; options.min_method ='NM'; 
 [c_hat(1).RE1all, y_hat(1).RE1all, y_pred(1).RE1all, stats(1).RE1all, sigma(1).RE1all, err(1).RE1all, exitflag(1).RE1all, num_iter(1).RE1all] = ...
    fitresp([2 3 8 180], 'fitresp_3B', [data.Ts5(ind_param(1).RE_all) data.SM(ind_param(1).RE_all)] , data.NEE(ind_param(1).RE_all), [data.Ts5 data.SM], data.NEEstd(ind_param(1).RE_all), options);
options.costfun ='WSS'; options.min_method ='NM'; options.f_coeff = [NaN NaN];
 [c_hat(1).RE1all_Tsonly, y_hat(1).RE1all_Tsonly, y_pred(1).RE1all_Tsonly, stats(1).RE1all_Tsonly, sigma(1).RE1all_Tsonly, err(1).RE1all_Tsonly, exitflag(1).RE1all_Tsonly, num_iter(1).RE1all_Tsonly] = ...
    fitresp([2 3], 'fitresp_3A', [data.Ts5(ind_param(1).RE_all)] , data.NEE(ind_param(1).RE_all), [data.Ts5], data.NEEstd(ind_param(1).RE_all), options);

% [c_hat(1).RE2, y_hat(1).RE2, y_pred(1).RE2, stats(1).RE2, sigma(1).RE2, err(1).RE2, exitflag(1).RE2, num_iter(1).RE2] = ...
%     fitresp([2 3 1 1], 'fitresp_3C', [data.Ts5(ind_param(1).RE_all) data.SM(ind_param(1).RE_all)], data.NEE(ind_param(1).RE_all), [data.Ts5 data.SM], data.NEEstd(ind_param(1).RE_all), 'WSS', 'NM');
% [c_hat(1).RE3, y_hat(1).RE3, y_pred(1).RE3, stats(1).RE3, sigma(1).RE3, err(1).RE3, exitflag(1).RE3, num_iter(1).RE3] = ...
%     fitresp([2 3 1 1 1], 'fitresp_3D', [data.Ts5(ind_param(1).RE_all) data.SM(ind_param(1).RE_all)], data.NEE(ind_param(1).RE_all), [data.Ts5 data.SM], data.NEEstd(ind_param(1).RE_all), 'WSS', 'NM');
fixed_RE_SM_coeffs = c_hat(1).RE1all(2:4); % changed this from 3:4 to 2:4 so that Q10 is fixed for all years.
%%% Save these 
 % Calculate Rraw:
 Rraw(1:length(data.NEE),1) = NaN;
 RE_model(1:length(data.NEE),1) = NaN;
 RE_model_Tsonly(1:length(data.NEE),1) = NaN;

if strcmp(site,'TP39')==1
ind_Rraw = find((data.Ustar >= Ustar_th & ~isnan(data.NEE) & data.PAR < 15 ) |... % growing season
     (data.Ustar >= Ustar_th & ~isnan(data.NEE) & ((data.dt < 85 | data.dt > 335) & data.Ts5 < 0.2)) );                             % non-growing season
else
ind_Rraw = find((data.Ustar >= Ustar_th & ~isnan(data.NEE) & data.PAR < 15 & ((data.Year < 2008 & data.Ta > 5) | (data.Year > 2007 & data.Ta > -20))) |... % growing season
     (data.Ustar >= Ustar_th & ~isnan(data.NEE) & ((data.dt < 85 | data.dt > 335) & data.Ts5 < 0.2) & ((data.Year < 2008 & data.Ta > 5) | (data.Year > 2007 & data.Ta > -20))) );                             % non-growing season
end
 
 Rraw(ind_Rraw) = data.NEE(ind_Rraw);

 %%% Run through Ts_RE_logistic function:
 ctr = 1;
for year = year_start:1:year_end
    if strcmp(site, 'TP39') == 1
ind_param(ctr).RE = find((data.Year == year &data.Ustar >= Ustar_th & ~isnan(data.Ts5) & ~isnan(data.SM) & ~isnan(data.NEE) & data.PAR < 15 ) |... % growing season
     (data.Year == year & data.Ustar >= Ustar_th & ~isnan(data.NEE) & ~isnan(data.SM) & ((data.dt < 85 | data.dt > 335) & data.Ts5 < 0.2)  ) );                                   % non-growing season
    else
ind_param(ctr).RE = find((data.Year == year &data.Ustar >= Ustar_th & ~isnan(data.Ts5) & ~isnan(data.SM) & ~isnan(data.NEE) & data.PAR < 15 &( (data.Year < 2008 & data.Ta > 2) | (data.Year > 2007 & data.Ta > -20) ) ) |... % growing season
     (data.Year == year & data.Ustar >= Ustar_th & ~isnan(data.NEE) & ~isnan(data.SM) & ((data.dt < 85 | data.dt > 335) & data.Ts5 < 0.2)& ( (data.Year < 2008 & data.Ta > 2) | (data.Year > 2007 & data.Ta > -20) ) ) );                                   % non-growing season
    end
 
 % Run Minimization:
% [c_hat(ctr).RE, y_hat(ctr).RE, y_pred(ctr).RE, stats(ctr).RE, sigma(ctr).RE, err(ctr).RE, exitflag(ctr).RE, num_iter(ctr).RE] = ...
%     fitresp([8 0.2 12], 'fitresp_2A', data.Ts5(ind_param(ctr).RE), data.NEE(ind_param(ctr).RE), data.Ts5(data.Year == year), data.NEEstd(ind_param(ctr).RE), 'WSS', 'NM');
% options.costfun ='WSS'; options.min_method ='NM'; options.f_coeff = [NaN NaN NaN NaN]
% [c_hat(ctr).RE1, y_hat(ctr).RE1, y_pred(ctr).RE1, stats(ctr).RE1, sigma(ctr).RE1, err(ctr).RE1, exitflag(ctr).RE1, num_iter(ctr).RE1] = ...
%     fitresp([2 3 8 180], 'fitresp_3B', [data.Ts5(ind_param(ctr).RE) data.SM(ind_param(ctr).RE)] , data.NEE(ind_param(ctr).RE), [data.Ts5(data.Year == year) data.SM(data.Year == year)], data.NEEstd(ind_param(ctr).RE), options);
options.costfun ='WSS'; options.min_method ='NM'; options.f_coeff = [NaN fixed_RE_SM_coeffs];
[c_hat(ctr).RE, y_hat(ctr).RE, y_pred(ctr).RE, stats(ctr).RE, sigma(ctr).RE, err(ctr).RE, exitflag(ctr).RE, num_iter(ctr).RE] = ...
    fitresp([2 3 8 180], 'fitresp_3B', [data.Ts5(ind_param(ctr).RE) data.SM(ind_param(ctr).RE)] , data.NEE(ind_param(ctr).RE), [data.Ts5(data.Year == year) data.SM(data.Year == year)], data.NEEstd(ind_param(ctr).RE), options);

options.costfun ='WSS'; options.min_method ='NM';options.f_coeff = [NaN NaN];
[c_hat(ctr).RE_Tsonly, y_hat(ctr).RE_Tsonly, y_pred(ctr).RE_Tsonly, stats(ctr).RE_Tsonly, sigma(ctr).RE_Tsonly, err(ctr).RE_Tsonly, exitflag(ctr).RE_Tsonly, num_iter(ctr).RE_Tsonly] = ...
    fitresp([2 3], 'fitresp_3A', [data.Ts5(ind_param(ctr).RE) data.SM(ind_param(ctr).RE)] , data.NEE(ind_param(ctr).RE), [data.Ts5(data.Year == year) data.SM(data.Year == year)], data.NEEstd(ind_param(ctr).RE), options);


% options.costfun ='WSS'; options.min_method ='NM'; options.f_coeff = [NaN 2.7 8 NaN]
% [c_hat(ctr).RE1c, y_hat(ctr).RE1c, y_pred(ctr).RE1c, stats(ctr).RE1c, sigma(ctr).RE1c, err(ctr).RE1c, exitflag(ctr).RE1c, num_iter(ctr).RE1c] = ...
%     fitresp([2 3 8 180], 'fitresp_3B', [data.Ts5(ind_param(ctr).RE) data.SM(ind_param(ctr).RE)] , data.NEE(ind_param(ctr).RE), [data.Ts5(data.Year == year) data.SM(data.Year == year)], data.NEEstd(ind_param(ctr).RE), options);


% [c_hat(ctr).RE2, y_hat(ctr).RE2, y_pred(ctr).RE2, stats(ctr).RE2, sigma(ctr).RE2, err(ctr).RE2, exitflag(ctr).RE2, num_iter(ctr).RE2] = ...
%     fitresp([2 3 1 1], 'fitresp_3C', [data.Ts5(ind_param(ctr).RE) data.SM(ind_param(ctr).RE)], data.NEE(ind_param(ctr).RE), [data.Ts5(data.Year == year) data.SM(data.Year == year)], data.NEEstd(ind_param(ctr).RE), 'WSS', 'NM');
% [c_hat(ctr).RE3, y_hat(ctr).RE3, y_pred(ctr).RE3, stats(ctr).RE3, sigma(ctr).RE3, err(ctr).RE3, exitflag(ctr).RE3, num_iter(ctr).RE3] = ...
%     fitresp([2 3 1 1 1], 'fitresp_3D', [data.Ts5(ind_param(ctr).RE) data.SM(ind_param(ctr).RE)], data.NEE(ind_param(ctr).RE), [data.Ts5(data.Year == year) data.SM(data.Year == year)], data.NEEstd(ind_param(ctr).RE), 'WSS', 'NM');

RE_model(data.Year == year,1) = y_pred(ctr).RE;
RE_model_Tsonly(data.Year == year, 1) = y_pred(ctr).RE_Tsonly;
% RE_model2(data.Year == year,1) = y_pred(ctr).RE2;
% RE_model3(data.Year == year,1) = y_pred(ctr).RE3;

ctr = ctr+1;
end
%%% We can't really use the time-varying parameter, but we can use this
%%% approach to help us fill in any gaps in predicted values when 
%%% we don't have SWC data:
rw = jjb_AB_gapfill(RE_model_Tsonly, RE_model,  [],200, 10, 'off', [], [], 'rw');
%%% Adjust modeled RE by TVP:
RE_model_Tsonly = RE_model_Tsonly.*rw(:,2);

RE_model(isnan(RE_model),1) = RE_model_Tsonly(isnan(RE_model),1);
%%% Plot the relationships for RE-Ts for each year:
figure('Name', 'Annual REvsTs');clf;
ctr = 1;
for year = year_start:1:year_end
    f_handle = 'fitresp_3B';
test_Ts_y =    feval(f_handle,c_hat(ctr).RE,[test_Ts ones(length(test_Ts))]);
% (c_hat(ctr).RE(1))./(1 + exp(c_hat(ctr).RE(2).*(c_hat(ctr).RE(3)-test_Ts)));
    plot(test_Ts, test_Ts_y,'-','Color', clrs(ctr,:)); hold on;
    ctr = ctr+1; 
end
legend(num2str((year_start:1:year_end)'));


%%% Plot estimates with raw data:
figure('Name','RE - raw vs. modeled');clf;
plot(Rraw,'k');hold on;
plot(RE_model_Tsonly,'b');
plot(RE_model,'r')
legend('raw','model-Tsonly', 'model-Ts+SM')

%%% Calculate stats for each:
[RE_stats(1,1) RE_stats(1,2) RE_stats(1,3) RE_stats(1,4)] = model_stats(RE_model_Tsonly, Rraw,'off');
[RE_stats(2,1) RE_stats(2,2) RE_stats(2,3) RE_stats(2,4)] = model_stats(RE_model, Rraw,'off');
%%% display stats on screen:
disp('Stats for Each RE Model:');
disp('              RMSE    |    rRMSE |     MAE     |   BE ');
disp(['model-Tsonly: ' num2str(RE_stats(1,:))]);
disp(['model-Ts+SM: ' num2str(RE_stats(2,:))]);

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%% PHOTOSYNTHESIS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
GEPraw = RE_model - data.NEE;
GEPraw(data.PAR < 15) = NaN;
GEP_model = zeros(length(GEPraw),1);
GEP_pred = NaN.*ones(length(GEPraw),1);
GEP_pred_fixed = NaN.*ones(length(GEPraw),1);
GEP_pred_fixed_noSM = NaN.*ones(length(GEPraw),1);

    ind_param(1).GEPall = find(data.Ts5 > 2 & data.Ta > 2 & data.PAR > 20 & ~isnan(GEPraw) & ~isnan(data.NEEstd) & ~isnan(data.SM) & data.VPD > 0 & data.Ustar > Ustar_th);
    clear options;
options.costfun ='WSS'; options.min_method ='NM'; 
X_in = [data.PAR(ind_param(1).GEPall) data.Ts5(ind_param(1).GEPall) data.VPD(ind_param(1).GEPall) data.SM(ind_param(1).GEPall)];
X_eval = [data.PAR data.Ts5 data.VPD data.SM];

[c_hat(1).GEPall, y_hat(1).GEPall, y_pred(1).GEPall, stats(1).GEPall, sigma(1).GEPall, err(1).GEPall, exitflag(1).GEPall, num_iter(1).GEPall] = ...
    fitGEP([0.1 40 2 0.5 -2 -0.8 8 180], 'fitGEP_1H1_3L6', X_in ,GEPraw(ind_param(1).GEPall),  X_eval, data.NEEstd(ind_param(1).GEPall), options);    

GEP_fixed_coeffs = c_hat(1).GEPall(3:end);



figure('Name','GEP-PAR relationship');clf
ctr = 1;
for year = year_start:1:year_end
    %%% Index of good data to use for model parameterization:
    ind_param(ctr).GEP = find(data.Ts5 > 2 & data.Ta > 2 & data.PAR > 15 & ~isnan(GEPraw) & data.Year == year & ~isnan(data.NEEstd) ...
        & ~isnan(data.SM) & data.VPD > 0);
X_in = [data.PAR(ind_param(ctr).GEP) data.Ts5(ind_param(ctr).GEP) data.VPD(ind_param(ctr).GEP) data.SM(ind_param(ctr).GEP)];
X_eval = [data.PAR(data.Year == year) data.Ts5(data.Year == year) data.VPD(data.Year == year) data.SM(data.Year == year)];

    %%% use fitGEP_1H1_3L6 function to get coefficients for GEP relationship:
        options.costfun ='WSS'; options.min_method ='NM'; options.f_coeff = NaN.*ones(1,8);
[c_hat(ctr).GEP, y_hat(ctr).GEP, y_pred(ctr).GEP, stats(ctr).GEP, sigma(ctr).GEP, err(ctr).GEP, exitflag(ctr).GEP, num_iter(ctr).GEP] = ...
    fitGEP([0.1 40 2 4 -2 -0.8 8 180], 'fitGEP_1H1_3L6', X_in,GEPraw(ind_param(ctr).GEP),  X_eval, data.NEEstd(ind_param(ctr).GEP), options);    
    %%% use fitGEP_1H1_3L6 function with fixed scalars to get coefficients for GEP relationship:
        options.costfun ='WSS'; options.min_method ='NM'; options.f_coeff = [NaN NaN GEP_fixed_coeffs];
    [c_hat(ctr).GEPfixed, y_hat(ctr).GEPfixed, y_pred(ctr).GEPfixed, stats(ctr).GEPfixed, sigma(ctr).GEPfixed, err(ctr).GEPfixed, exitflag(ctr).GEPfixed, num_iter(ctr).GEPfixed] = ...
    fitGEP([0.1 40], 'fitGEP_1H1_3L6', X_in,GEPraw(ind_param(ctr).GEP),  X_eval, data.NEEstd(ind_param(ctr).GEP), options);    
%%% We need a dataset to fill in gaps in predicted GEP when we don't have
%%% soil moisture -- we'll do this by just setting SM to 0.2 (no reduction
%%% effect), and then we'll take care of any differences at a later point:
X_eval2 = X_eval;
X_eval2(isnan(X_eval2(:,4)),4) = 0.2;
    [c_hat(ctr).GEPfixed_noSM, y_hat(ctr).GEPfixed_noSM, y_pred(ctr).GEPfixed_noSM, stats(ctr).GEPfixed_noSM, sigma(ctr).GEPfixed_noSM, err(ctr).GEPfixed_noSM, exitflag(ctr).GEPfixed_noSM, num_iter(ctr).GEPfixed_noSM] = ...
    fitGEP([0.1 40], 'fitGEP_1H1_3L6', X_in,GEPraw(ind_param(ctr).GEP),  X_eval2, data.NEEstd(ind_param(ctr).GEP), options);    

% [GEP_coeff(ctr,:) GEP_pred GEP_r2 GEP_sigma] = hypmain1([0.01 10 0.1], 'fit_hyp1', data.PAR(ind_param_GEP), GEPraw(ind_param_GEP), data.NEEstd(ind_param_GEP));
    %%% Estimate GEP for the given year:
GEP_pred(data.Year == year,1) = y_pred(ctr).GEP;
GEP_pred_fixed(data.Year == year,1) = y_pred(ctr).GEPfixed;
GEP_pred_fixed_noSM(data.Year == year,1) = y_pred(ctr).GEPfixed_noSM;

%GEP_coeff(ctr,1).*data.PAR(data.Year==year,1).*GEP_coeff(ctr,2)./...
%    (GEP_coeff(ctr,1).*data.PAR(data.Year==year,1) + GEP_coeff(ctr,2));
    %%% GEP relationship for plotting:
     test_PAR_y = c_hat(ctr).GEP(1).*test_PAR.*c_hat(ctr).GEP(2)./...
     (c_hat(ctr).GEP(1).*test_PAR + c_hat(ctr).GEP(2));
     test_PAR_yfixed = c_hat(ctr).GEPfixed(1).*test_PAR.*c_hat(ctr).GEPfixed(2)./...
     (c_hat(ctr).GEPfixed(1).*test_PAR + c_hat(ctr).GEPfixed(2));
    %%% Plot relationships:
    subplot(1,2,1)
    plot(test_PAR, test_PAR_y,'-','Color', clrs(ctr,:)); hold on;
        subplot(1,2,2)
    plot(test_PAR, test_PAR_yfixed,'-','Color', clrs(ctr,:)); hold on;
    clear GEP_r2 GEP_sigma test_PAR_y;
    ctr = ctr+1;
end
legend(num2str((year_start:1:year_end)'));

%%% Use Time-varying-parameter to fill during periods when we don't have SM:
pw = jjb_AB_gapfill(GEP_pred_fixed_noSM, GEP_pred_fixed, [],200, 10, 'off', [], [], 'rw');
GEP_pred_fixed_noSM_adj = GEP_pred_fixed_noSM.*pw(:,2);
GEP_pred_fixed(isnan(GEP_pred_fixed),1) = GEP_pred_fixed_noSM_adj(isnan(GEP_pred_fixed),1);

%%% Clean up any problems that may exist in the data:
ind_GEP = find(data.PAR >= 15 & ((data.dt > 85 & data.dt < 330 & (data.GDD > 8 | data.Ts5 >= 1 & data.Ta > 2)) ...
                | data.dt > 330 & data.Ts5 >= 1.25 & data.Ta > 2));
GEP_model(ind_GEP) = GEP_pred_fixed(ind_GEP);



%%% Plot estimates with raw data:
figure('Name','GEP - raw vs. modeled');clf;
plot(GEPraw,'k');hold on;
plot(GEP_pred,'c');
plot(GEP_pred_fixed,'r');
plot(GEP_model,'b');
legend('raw','pred -variable scalar','pred-fixed scalars', 'final-modeled')

%%% Calculate stats for each:
[GEP_stats(1,1) GEP_stats(1,2) GEP_stats(1,3) GEP_stats(1,4)] = model_stats(GEP_model, GEPraw,'off');
[GEP_stats(2,1) GEP_stats(2,2) GEP_stats(2,3) GEP_stats(2,4)] = model_stats(GEP_pred_fixed, GEPraw,'off');
%%% display stats on screen:
disp('Stats for Each GEP Model:');
disp('                     RMSE    |    rRMSE  |  MAE     |    BE ');
disp(['final-modeled:      ' num2str(GEP_stats(1,:))]);
disp(['pred-fixed scalars: ' num2str(GEP_stats(2,:))]);

%% Compile coefficient values for easy-reading:
coeff_list = fieldnames(c_hat(1));

for i = 1:1:length(coeff_list)
    
    for j = 1:1:length(c_hat)
        try
eval(['c_hat_' char(coeff_list(i)) '(j,:) = c_hat(j).' char(coeff_list(i)) ';']);     
        catch
      eval(['c_hat_' char(coeff_list(i)) '(j,:) = NaN;']);  
        end
    end
end
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%  Final Filling & Output  %%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% Clean NEE (ustar filtering):
NEE_raw = data.NEE;
NEE_clean = NEE_raw;
NEE_clean(data.PAR < 15 & data.Ustar < Ustar_th,1) = NaN;

%%% Fill RE - Use raw data when Ustar > threshold; otherwise, use model+tvp
RE_filled(1:length(Rraw),1) = RE_model;
RE_filled(~isnan(Rraw) & data.Ustar > Ustar_th,1) = Rraw(~isnan(Rraw) & data.Ustar > Ustar_th,1);

%%% Fill GEP:
% start with filled GEP equal to all zeroes
GEP_filled = zeros(length(GEPraw),1);
% fill any nans in GEPraw with GEP_model:
GEPraw(isnan(GEPraw) | GEPraw < 0,1) = GEP_model(isnan(GEPraw) | GEPraw < 0,1);
% Now, substitute GEPraw into GEP_filled when applicable (set by ind_GEP)
ind_GEP = find(data.PAR >= 15 & ((data.dt > 85 & data.dt < 330 & (data.GDD > 8 | data.Ts5 >= 1 & data.Ta > 2)) ...
                | data.dt > 330 & data.Ts5 >= 1.25 & data.Ta > 2));

GEP_filled(ind_GEP) = GEPraw(ind_GEP);
% GEP_filled(data.PAR < 15 | GEP_filled < 0) = NaN; 
% GEP_filled(isnan(GEP_filled),1) = GEP_model(isnan(GEP_filled),1);

%%% Fill NEE:
NEE_filled = NEE_clean;
NEE_filled(isnan(NEE_filled),1) = RE_filled(isnan(NEE_filled),1) - GEP_filled(isnan(NEE_filled),1);

%% Plot filled data:
figure('Name', 'Final Filled Data');clf
plot(NEE_filled)
hold on;
plot(RE_filled,'r')
plot(-1.*GEP_filled,'g')
%% The final loop to calculate annual sums and check for holes remaining in data:
ctr = 1;
for yr_ctr = year_start:1:year_end
    holes(ctr,1) = yr_ctr;
    try
        %%% Special fix for 2003 -- we lost 8 datapoints due to UTC timeshift:
        if yr_ctr == 2003;
            NEE_filled(1:8,1) = NEE_filled(9,1);
            RE_filled(1:8,1) = RE_filled(9,1);
            GEP_filled(1:8,1) = GEP_filled(9,1);
        end

        NEE_sum(ctr,1) = sum(NEE_filled(data.Year== yr_ctr,1)).*0.0216  ; % sums is annual sum
        GEP_sum(ctr,1) = sum(GEP_filled(data.Year== yr_ctr,1)).*0.0216  ;
        RE_sum(ctr,1) = sum(RE_filled(data.Year== yr_ctr,1)).*0.0216  ;       
        holes(ctr,2:4) = [length(find(isnan(NEE_filled(data.Year == yr_ctr,1)))) ...
                        length(find(isnan(RE_filled(data.Year == yr_ctr,1)))) ... 
                        length(find(isnan(GEP_filled(data.Year == yr_ctr,1))))] ;
    catch
        disp(['something went wrong calculating sums, year: ' num2str(yr_ctr)]);
        NEE_sum(ctr,1) = NaN;
        GEP_sum(ctr,1) =  NaN;
        RE_sum(ctr,1) =  NaN;
        holes(ctr,1:3) = NaN;
    end

ctr = ctr+1;
end

sums = [holes(:,1) NEE_sum(:,1) RE_sum(:,1) GEP_sum(:,1)];
disp('Number of NaNs outstanding in data: Year | NEE | RE | GEP ');
disp(holes);
disp('Annual Totals: Year | NEE | RE | GEP ');
disp(sums)


%% Compile data and save:
master.data.Year = data.Year(:,1);
master.data.NEE_raw = NEE_raw(:,1);
master.data.NEE_clean = NEE_clean(:,1);
master.data.NEE_filled = NEE_filled(:,1);
master.data.GEP_filled = GEP_filled(:,1);
master.data.RE_filled = RE_filled(:,1);

master.data.RE_model = RE_model;  
master.data.GEP_model = GEP_model;  
master.data.sums = sums;

save([save_path site '_PI-Pref_GapFilled_' num2str(year_start) '_' num2str(year_end) '_ust_th = ' num2str(Ustar_th) '.mat'],'master');
disp('done!');
