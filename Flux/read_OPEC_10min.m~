function [output] = read_OPEC_10min(load_path)
%%% read_OPEC_10min.m
%%% This function loads a single 10-min averaged OPEC file, separates into the
%%% following:
%%% output.progsig - program signature
%%% output.data - data (with time data)
%%% output.varnames - variable names

ls = addpath_loadstart('off'); % 'off' just turns off verbosity

% Navigate to the right directory if not specified by load_dir
if nargin == 0 || isempty(load_path)==1
    filename = uigetfile([ls 'SiteData/*.*'],'Please navigate to directory with conditioned data in it');
end

% OPEN THE FILE:
fid = fopen(load_path);

%%%%%%%%%%%% Gets Header and variable names
for i = 1:4
    clear tline;
  tline = fgets(fid);
  
  %%% Find the program signature from the first line:
  if i == 1
      tline(tline == '"') = ''; % take out the quotation marks.
      coms = find(tline == ','); % find commas
      prog_sig = tline(coms(end-1)+1:coms(end)-1);
      try
          if length(prog_sig) < 4 || length(prog_sig) > 5
              fail_flag = 1;
          else 
              fail_flag = 0;
              prog_sig = str2num(prog_sig);
          end
      catch
         fail_flag = 1;
      end
      % If there's a problem, try to get the user to enter it manually:
          if fail_flag == 1;
              disp(tline);
              prog_sig = input('Please find and enter the program signature from this line (5-digit number): ');
          end
      
  %%% This loop writes a header file into cell format from the original
  %%% data file
  elseif i == 2
    tline(tline == '"') = ''; % take out the quotation marks.
    coms = find(tline == ','); % find commas
    num_vars = length(coms) + 1;
    
    coms = [0 coms length(tline)+1];
%      hdr = cellstr(tline(1:coms(1)-1));
      for ctr = 1:1:length(coms)-1
          varnames{ctr,1} = cellstr(tline(coms(ctr)+1:coms(ctr+1)-1));
      end
  end
end

%%% Make Format:
format_string = '%s';
for k = 2:1:num_vars
    format_string = [format_string ' %n'];
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Main Part: Loads the data from the file and puts into a data matrix:
eofstat = 0;
row_ctr = 1;
% clear tmp_data;

while eofstat == 0;
    try
        pntr_pos = ftell(fid); % Tells us where the counter is at before it tries textscan
        
        tmp_data = textscan(fid, format_string, 200, 'Delimiter',',','EmptyValue', NaN, 'CommentStyle', {'-1.#','D'});%,'CommentStyle',{'-1.#','D'});
        rows_to_add = length(tmp_data{1,1});
        timestamp(row_ctr:row_ctr+rows_to_add-1,:) = char(tmp_data{1,1});
        
        for k = 2:1:length(tmp_data)
            if length(tmp_data{1,k}) < rows_to_add
                tmp_switch = tmp_data{1,k};
                tmp_switch = [tmp_switch; NaN.*ones(rows_to_add - length(tmp_data{1,k}))];
                tmp_data{1,k} = tmp_switch;
                clear tmp_switch;
            end
            
            data(row_ctr:row_ctr+rows_to_add-1,k) = tmp_data{1,k}; % we'll add the timevector back in later..
        end
        row_ctr = row_ctr + rows_to_add;
        clear tmp_data rows_to_add;
        eofstat = feof(fid);
        
    catch
%         disp(row_ctr);            % can be turned on for debugging purposes.
        disp(['error starting at line ' num2str(row_ctr) ', skipping this line..']);
        
        fseek(fid, pntr_pos, 'bof');
        junk = fgets(fid); % advances the pointer to the next line and tries again
        clear junk;
        eofstat = feof(fid); % added 29-Jun-2010 by JJB:
    end

end
fclose(fid);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if ~isempty(data)
%%% Convert time_stamp into a timevector
    try
        yyyy = str2num(timestamp(:,1:4));   MON = str2num(timestamp(:,6:7));
        DAY = str2num(timestamp(:,9:10));   hh  = str2num(timestamp(:,12:13));
        mm  = str2num(timestamp(:,15:16));
        
    TV(:,1) = JJB_DL2Datenum(yyyy, MON, DAY, hh, mm, 00);
    
    catch
        %%% This part fixes cases where a #IND gets put in the timestamp
        %%% This is hopefully now fixed -- caused by bad data being
        %%% represented by '1.#IND' instead of '-1.#IND', which the
        %%% textscan program looks for to replace with NaNs:
        try
        for k = 1:1:length(timestamp)
            ind(k,1) = strncmp(timestamp(k,:),'20',2);
        end

        good_rows = find(ind == 1);
        catch
            disp('stop')
        end
        timestamp_tmp = timestamp(good_rows,:); clear timestamp;
        timestamp = timestamp_tmp;
        clear timestamp_tmp;
        
        yyyy = str2num(timestamp(:,1:4));   MON = str2num(timestamp(:,6:7));
        DAY = str2num(timestamp(:,9:10));   hh  = str2num(timestamp(:,12:13));
        mm  = str2num(timestamp(:,15:16));        
    TV(:,1) = JJB_DL2Datenum(yyyy, MON, DAY, hh, mm, 00);
        
      data_tmp = data(good_rows,:); clear data;
      data = data_tmp;
      clear data_tmp;
        
%         disp('whoops!');
%         s = input('here');
    end
        
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Restructure the data file to add in the time vectors:
data = [TV yyyy MON DAY hh mm data(1:end,2:end)];

%%% Restructure the final variable names:
varnames_out(1:6,1) = {'TimeVec';'Year';'Month';'Day';'Hour';'Minute'};
for i = 2:1:length(varnames)
    varnames_out{5+i,1} = char(varnames{i,1});
end

%%% Compile the final output file:
output.labels = varnames_out;
output.prog_sig = prog_sig;
output.data = data;

else
output = [];
disp(['File ' load_path ' seems to be empty.']);
end
   




