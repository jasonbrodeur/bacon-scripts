function[met_master hdr_cell_tmpt yr_len num_cols dir_data] = CR1000_metloader(site, year,load_path)
loadstart = addpath_loadstart;
if ischar(year) == false
    yr_str = num2str(year);
else
    yr_str = year;
end
%% DECLARE PATHS

%%% Loads paths for Sapflow data
% if strcmp(site,'sf')==true        %%%% check if processing sapflow or met data
%     %%% Defines the path where the raw data file is to be loaded
%     pth_data_start = ([ loadstart 'Matlab/Data/Met/Raw1/Sapflow/' yr_str '/']);
%     %%% Establish Output directories for master file, 5min, 30min and 1 hour column vectors
%     output_dir = ([ loadstart 'Matlab/Data/Met/Organized2/Sapflow/Master/']);    % Master file
%
%     % elseif strcmp(site,'TP_PPT')==true        %%%% check if processing Fish Hatchery Precip Data
%     % pth_data_start = ([ loadstart 'Matlab/Data/Met/Raw1/' site '/' yr_str '/']);
%     % %%% Establish Output directories for master file, 5min, 30min and 1 hour column vectors
%     % output_dir = ([ loadstart 'Matlab/Data/Met/Organized2/' site '/Master/']);    % Master file
%
% else
% pth_hdr = ('C:/Home/Matlab/Data/Met/Raw1/Docs/'); %% declare the folder where column header .txt files are located
%%% Defines the path where the raw data file is to be loaded
% pth_data_start = ([ loadstart 'Matlab/Data/Met/Raw1/' site '/' yr_str '/' ]);        % Defines the path where the raw data file is to be loaded
%%% Establish Output directories for master file, 5min, 30min and 1 hour column vectors
output_dir = [ loadstart 'Matlab/Data/Met/Organized2/' site '/Master/'];    % Master File
% end

%%% Declare the header .txt (or .csv) files and data files are located
pth_hdr_start = ([ loadstart 'Matlab/Data/Met/Raw1/Docs/']);

[dir_data] = uigetdir(load_path,'Select directory to process data');

% [file_tmpt dir_tmpt] = uigetfile('*.csv','Select Output Template file for atmo data',pth_hdr_start);
% pth_tmpt = [dir_tmpt file_tmpt];
pth_tmpt = [pth_hdr_start site '_OutputTemplate.csv']; % changed this to be automatic.

pth_names = [loadstart 'Matlab/Data/Met/Raw1/Docs/' site '_CR1000_Namefile.csv'];

%% OPEN HEADER FILES %%%%%%%%%%%%%%%%%%%%%%%
%%% Open the output template file
[hdr_cell_tmpt] = jjb_hdr_read(pth_tmpt ,',',3);
%%% Open the variable name conversion file
[hdr_names] = jjb_hdr_read(pth_names,',',2);

%%% Cycle through the hdr_names file and make sure that there are no
%%% quotation marks around the variable names:
for i = 1:1:length(hdr_names);
    tmp_name1 = hdr_names{i,1};      tmp_name2 = hdr_names{i,2}; 
    tmp_name1(tmp_name1 == '"')= ''; tmp_name2(tmp_name2 == '"')= '';
    hdr_names{i,1} = tmp_name1;      hdr_names{i,2} = tmp_name2;
    clear tmp_name1 tmp_name2
end

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%                   LOADING OR CREATING MASTER FILE:
% Determine length of columns needed if master file needs to be created:
if strcmp(site,'TP39')==true
    num_cols = 110;
elseif strcmp(site,'TP_PPT')==true
    num_cols = 30;
else
    num_cols = 60;
end
% Determine Year length:
[junk(:,1) junk(:,2) junk(:,3) junk(:,4)]  = jjb_makedate(str2double(yr_str),30);
yr_len = length(junk);
clear junk
% Find out if master file exists, or if one needs to be made:
if exist([output_dir site 'master' yr_str '.mat']);                           % Check if the output master file already exists
    disp ('Master .mat File exists --- Opening for appending')
    load([output_dir site 'master' yr_str '.mat']); % If master file exists, open it for appending


    
    

if exist([output_dir site 'master' yr_str '.dat']);                           % Check if the output master file already exists
    disp ('Master File exists --- Opening for appending')
    met_master = load([output_dir site 'master' yr_str '.dat']); % If master file exists, open it for appending

    if strcmp(site,'TP_PPT')==true
        TV = make_tv(str2num(yr_str),30);
        [year JD HHMM] =jjb_makedate(str2num(yr_str),30);
    else
        TV = make_tv(str2num(yr_str),5);
        [year JD HHMM] =jjb_makedate(str2num(yr_str),5);
    end

else
    disp('Master File does not exist --- Creating file')                      % If master file does not exist,
    if strcmp(site,'TP_PPT')==true
        met_master(1:yr_len,1:num_cols) = NaN;
    else
        met_master(1:yr_len*6,1:num_cols) = NaN;                                % create a matrix with 60 (0r 110) empty NaN columns for every 5 minutes in a year
    end
    % make a time vector using make_tv function, place it into the first
    % column of master file
    if strcmp(site,'TP_PPT')==true
        TV = make_tv(str2double(yr_str),30);
        [Year, JD, HHMM, dt] =jjb_makedate(str2double(yr_str),30);
    else
        TV = make_tv(str2double(yr_str),5);
        [Year, JD, HHMM, dt] =jjb_makedate(str2double(yr_str),5);
    end
    met_master(:,1) = TV;
    met_master(:,2) = year(:,1);
    met_master(:,3) = JD(:,1);
    met_master(:,4) = HHMM(:,1);
end

%% **************************** LOAD data files from selected directory:
D = dir(dir_data);
filedata = struct;
good_file(1:length(D),1) = 0;
for j = 1:1:length(D)
    if D(j).isdir == 0 && D(j).name(end) ~= '~';
        good_file(j,1) = 1;
    end
end
load_files = find(good_file == 1);
clear good_file
%% Loop through files:
for fn = 1:1:length(load_files)
    disp(['Reading ' dir_data '/' D(load_files(fn)).name]);
    fid = fopen([dir_data '/' D(load_files(fn)).name]);
    filedata(fn).filename = D(load_files(fn)).name;

    %%% FIRST PART - Separates first 4 lines from rest
    for j = 1:1:4;
        tline = fgets(fid);

        if j == 2   % second line has variable names (others are junk)
            filedata(fn).coms = find(tline == ',');
            filedata(fn).coms = [0 filedata(fn).coms length(tline)+1];
            %%% Extract Names
            for i = 1:1:length(filedata(1,fn).coms)-1
                tmp_varname = tline(filedata(fn).coms(i)+1:filedata(fn).coms(i+1)-1);
                tmp_varname(tmp_varname == '"') = ''; %remove quotation marks.
                filedata(1,fn).varnames{i,1} = cellstr(tmp_varname);
            clear tmp_varname;
            end
            clear tline;
        end
    end

    %%% Create format file for textread to separate data:
    format_string = '%s';
    for k = 2:1:length(filedata(fn).coms)-1
        format_string = [format_string ' %n'];
    end
    
    
    eofstat = 0;
    row_ctr = 1;
    clear tmp_data;
    
    while eofstat == 0;
        %%% Read all data fields using textscan:
        try
        % The CommentStyle command is critical for ignoring "NaN" values in
        % the data file, which MATLAB thinks is a string because of the
        % quotation marks.
        tmp_data = textscan(fid,format_string,200,'Delimiter',',','EmptyValue', NaN,'CommentStyle', {'"N', 'N"'});
        %%% Timestamp from data:
        rows_to_add = length(tmp_data{1,1});
        timestamp(row_ctr:row_ctr+rows_to_add-1,:) = char(tmp_data{1,1});
        for k = 2:1:length(tmp_data)
            % fixes the case where one column may be shorter than the rest
            % (I don't know why this would happen, but it does).
            if length(tmp_data{1,k}) < rows_to_add
                tmp_switch = tmp_data{1,k};
                tmp_switch = [tmp_switch ; NaN.*ones(rows_to_add - length(tmp_data{1,k}))];
                tmp_data{1,k} = tmp_switch;
                clear tmp_switch
            end
                
            data(row_ctr:row_ctr+rows_to_add-1,k) = tmp_data{1,k}; % start at column 2 and then add timevec back in later
        end
        row_ctr = row_ctr + rows_to_add;
        clear tmp_data rows_to_add;
        eofstat = feof(fid);
        catch
            disp(row_ctr);
            s = input('error');
        end
    end
    
    fclose(fid);
    
    %%% Convert time_stamp into a timevector
    input_date(:,1) = JJB_DL2Datenum(str2num(timestamp(:,2:5)), str2num(timestamp(:,7:8)), ...
        str2num(timestamp(:,10:11)), str2num(timestamp(:,13:14)), str2num(timestamp(:,16:17)), 00);

    
    % %%% Round input_date and TV to 5 decimal places - to avoid timevector mismatch
    input_date = (round(input_date.*100000))./100000;
    TV = (round(TV.*100000))./100000;
    
    % %%% Find intersection points between dates in input_data and TV:
    [row_common row_in row_master] = intersect(input_date(:,1), TV);

    for vars = 1:1:length(filedata(fn).varnames) % cycles through all columns in raw data file

        name_row = find(strcmp(hdr_names(:,1),filedata(fn).varnames{vars})==1); % finds row in namefile where variable name exists
%         if isempty(name_row)==1;
%             filedata(fn).varnames(vars,1) = ['"' filedata(fn).varnames(vars,1) '"'];
%             name_row = find(strcmp(hdr_names(:,1),filedata(fn).varnames{vars})==1); % finds row in namefile where variable name exists
%         end
        right_name = char(hdr_names(name_row,2)); % converts variable name to its final storage name

        if isempty(right_name)
        else

            try
                right_name(right_name =='"') = '';
                right_col = find(strcmp(hdr_cell_tmpt(:,2),right_name)==1);
                met_master(row_master,right_col) = data(row_in,vars);
                clear right_col
            catch
                disp(['variable ' char(right_name) ' not processed.']);
            end
        end
        clear name_row right_name timestamp input_date;


    end
    clear names timestamp
clear data input_date row_common row_in row_master;
end
